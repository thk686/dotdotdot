% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dots.R
\name{do_dots}
\alias{do_dots}
\title{Call functions}
\usage{
do_dots(f, ..., consume = FALSE, quote = FALSE, envir = parent.frame())
}
\arguments{
\item{f}{vector containing one or more functions or function names}

\item{...}{arguments to be passed to the functions named in \code{f}}

\item{consume}{if true, each function removes is arguments prior to the next
call}

\item{quote}{passed to \code{\link{do.call}}}

\item{envir}{passed to \code{\link{do.call}}}
}
\value{
A list of return values from each function named in \code{f}. Each
  list element will be named for the function called or the name used in
  constructing the vector \code{f}. All unused arguments will returned in the
  "..." list element.
}
\description{
Pass the elipsis arguemnt to one or more functions
}
\details{
Each function named in \code{f} is executed using
  \code{\link{do.call}}. The additional arguments given in "..." will be
  matched against the formals of the subfunction. Each function will only be
  passed arguments matching its \code{\link{formals}}. Argument matching is
  recorded and any unused arguments are returned.

  If \code{consume} is true, then each function called in order will remove
  its matching arguments from those available to the next function.

  The ... arguments will be evaluated prior to \code{\link{do.call}}, so you
  must \code{\link{quote}} them if you want to avoid early evaluation.
}
\examples{
f = function(a, b) c(a, b)
g = function(c, d) c(c, d)

h = function(...) { f(...); g(...) }
try({ h(a = 1, b = 2, c = 3, d = 4) })

do_dots(c("f", "g"), a = 1, b = 2, c = 3, d = 4, e = 5)

j = function(a, d) c(a, d)
do_dots(c("f", "j"), a = 1, b = 2, c = 3, d = 4)
try({ do_dots(c("f", "j"), a = 1, b = 2, c = 3, d = 4, consume = TRUE) })

# primitive functions use implicit ... args
do_dots("sum", rnorm(100))

}

